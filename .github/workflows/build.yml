name: "Cross-platform check"

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  linux:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "linux: clang",
            cc: "clang",
            cxx: "clang++"
          }
          - {
            name: "linux: gcc",
            cc: "gcc-10",
            cxx: "g++-10"
          }

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        shell: bash
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: |
          # Add lunarg apt sources
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-focal.list https://packages.lunarg.com/vulkan/lunarg-vulkan-focal.list

          # Update package lists
          sudo apt-get update -qq
          
          # Install GCC 10 (required for concepts)
          sudo apt-get install -y \
            gcc-10 \
            g++-10

          # Install dependencies
          sudo apt-get install -y \
            vulkan-sdk

          cmake -E make_directory ${{ runner.workspace }}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          export CC=${{ matrix.config.cc }}
          export CXX=${{ matrix.config.cxx }}
          cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -Davk_LibraryType=STATIC $GITHUB_WORKSPACE

      - name: Build
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

  windows:
    name: ${{ matrix.config.name }} using VulkanSDK version ${{ matrix.vulkan-sdk }}
    runs-on: windows-latest
    env:
      vulkan_sdk: "$GITHUB_WORKSPACE/vulkan_sdk/"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "windows: msvc",
            cc: "cl",
            cxx: "cl"
          }
        # todo: add more vulkan versions that should be tested (e.g. 1.1.x, or < 1.2.135)
        vulkan-sdk: ["latest"] #, "1.2.176.1"]

    steps:
      # apparently checkout@v2 pulls to Auto-Vk/Auto-Vk on windows
      - uses: actions/checkout@v2
      
      # the download URL for the latest SDK version changes sometimes (every four months or so?)...
      - name: Install Vulkan SDK
        if: matrix.vulkan-sdk == 'latest'
        run: |
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe" -OutFile VulkanSDK.exe
          $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S /O `"${{ env.vulkan_sdk }}`"");
          $installer.WaitForExit();
      
      # the download URL for the latest SDK version changes sometimes...
      - name: Install Vulkan SDK
        if: matrix.vulkan-sdk != 'latest'
        run: |
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/${{ matrix.vulkan-sdk }}/windows/VulkanSDK-${{ matrix.vulkan-sdk }}-Installer.exe" -OutFile VulkanSDK.exe
          $installer = Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
          $installer.WaitForExit();

      - name: Create Build Environment
        # apparently checkout@v2 pulls to Auto-Vk/Auto-Vk on windows
        working-directory: ${{ runner.workspace }}/Auto-Vk
        shell: pwsh
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: |
          # apparently checkout@v2 pulls to Auto-Vk/Auto-Vk on windows
          cmake -E make_directory ${{ runner.workspace }}/Auto-Vk/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: pwsh
        # apparently checkout@v2 pulls to Auto-Vk/Auto-Vk on windows
        working-directory: ${{ runner.workspace }}/Auto-Vk/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          $env:CC="${{ matrix.config.cc }}"
          $env:CXX="${{ matrix.config.cxx }}"
          $env:Path += ";${{ env.vulkan_sdk }}\;${{ env.vulkan_sdk }}\Bin\"

          # apparently checkout@v2 pulls to Auto-Vk/Auto-Vk on windows
          cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -Davk_LibraryType=STATIC ${{ runner.workspace }}/Auto-Vk -G "Visual Studio 16 2019" -A x64

      - name: Build
        shell: bash
        # apparently checkout@v2 pulls to Auto-Vk/Auto-Vk on windows
        working-directory: ${{ runner.workspace }}/Auto-Vk/build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE
